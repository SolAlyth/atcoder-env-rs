{
	"Initialize for AtCoder": {
		"scope": "rust",
		"prefix": "init",
		"body": "#![allow(unused_must_use, non_snake_case)]\n\n#[allow(unused_imports)]\nuse {mylib::*, ac_library::ModInt998244353 as Mint};\nconst INTERACTIVE: bool = false;\n\nfn solve() {\n\tinput! {\n\t\t$1\n\t}\n\t\n\t$0\n}\n\n\n\nfn main() { out.init(if INTERACTIVE || !SUBMISSION { EndFlag::Print } else { EndFlag::LineFeed }); solve(); out.print() }\n\n#[test] fn test() { out.init(EndFlag::Print); out.print(); }"
	},
	
	"stderr print": {
		"scope": "rust",
		"prefix": "epr",
		"body": "epr!(\"{$0}\");"
	},
	
	"nested vector": {
		"scope": "rust",
		"prefix": "nest",
		"body": "nest![$0];"
	},
	
	"unreachable match": {
		"scope": "rust",
		"prefix": "snp_match_unreachable",
		"body": "_ => { unreachable!(); }"
	},
	
	"LRUD match": {
		"scope": "rust",
		"prefix": "snp_match_lrud",
		"body": [
			"match $0 {",
			"\t'L' => {",
			"\t\t// j--",
			"\t}",
			"\t'R' => {",
			"\t\t// j++",
			"\t}",
			"\t'U' => {",
			"\t\t// i--",
			"\t}",
			"\t'D' => {",
			"\t\t// i++",
			"\t_ => { unreachable!() }",
			"\t}",
			"}"
		]
	},
	
	"最長増加部分列 (LIS)": {
		"scope": "rust",
		"prefix": "snp_lis",
		"body": [
			"let mut lis = vec![${1:MAX_VALUE}; ${2:A.len()}+1];",
			"let mut lis_len = vec![0; $2];",
			"",
			"for i in 0..$2 {",
			"    let idx = lis.lower_bound(&${3:A[i]});",
			"    lis[idx] = $3;",
			"    lis_len[i] = idx+1;",
			"}",
			"",
			"// let most_long = lis.lower_bound(&$1).unwrap();"
		]
	},
	
	"二次元累積和": {
		"scope": "rust",
		"prefix": "snp_wa_2",
		"body": [
			"// res[i][j] = sum of A[0..i][0..j]",
			"let res = {",
			"\tlet A: Vec<Vec<u64>>;",
			"\tlet (h, w) = (A.len(), A[0].len());",
			"\t",
			"\tlet mut res = nest![0; h+1; w+1]; // res[i][j] = sum of A[0..i][0..j]",
			"\tfor (i, j) in iproduct!(0..h, 0..w) {",
			"\t\tres[i+1][j+1] = res[i][j+1] + res[i+1][j] - res[i][j];",
			"\t\tres[i+1][j+1] += /* A[i][j] */;",
			"\t}",
			"\tres",
			"};"
		]
	},
	
	"三次元累積和": {
		"scope": "rust",
		"prefix": "snp_wa_3",
		"body": [
			"",
			"let res = {",
			"\tlet (li, lj, lk) = (A.len(), A[0].len(), A[0][0].len());",
			"\tlet f = |i, j, k| { /* A[i][j][k] */ };",
			"\t",
			"\tlet mut res = nest![0; li+1; lj+1, lk+1]; // res[i][j][k] = sum of A[0..i][0..j][0..k]",
			"\tfor (i, j, k) in iproduct!(0..li, 0..lj, 0..lk) {",
			"\t\tres[i+1][j+1][k+1] = res[i][j+1][k+1] + res[i+1][j][k+1] + res[i+1][j+1][k] + res[i][j][k] - res[i+1][j][k] - res[i][j+1][k] - res[i][j][k+1];",
			"\t\tres[i+1][j+1][k+1] += f(i, j, k);",
			"\t}",
			"\tres",
			"};"
		]
	},
	
	"test": {
		"scope": "rust",
		"prefix": "test",
		"body": [
			"#[test]",
			"fn $1() {",
			"\t$0",
			"}"
		]
	}
}
