{
	"Initialize for AtCoder": {
		"scope": "rust",
		"prefix": "init",
		"body": "#![allow(non_snake_case)]\n\nuse mylib::*;\n\nconst INTERACTIVE: bool = false;\n\n#[allow(unused_must_use)]\nfn solve<_T: BufRead>(#[allow(unused)] out: &Printer, mut stdin: impl Source<_T>) {\n\tmacro_rules! input {(\\$(\\$t:tt)*)=>{mylib::input!(from &mut stdin, \\$(\\$t)*);}}\n\tinput! {\n\t\t$1\n\t}\n\t\n\t$0\n}\n\n\nconst INPUT: &str = \"\";\n\n\nfn main() {\n\tlet out = Printer::new(INTERACTIVE || !mylib::SUBMISSION);\n\tif !mylib::SUBMISSION {\n\t\tif INPUT != \"\" {\n\t\t\tsolve(&out, OnceSource::from(INPUT));\n\t\t} else {\n\t\t\tsolve(&out, LineSource::new(BufReader::new(stdin())));\n\t\t}\n\t} else {\n\t\tif !INTERACTIVE {\n\t\t\tsolve(&out, OnceSource::new(BufReader::new(stdin())));\n\t\t} else {\n\t\t\tsolve(&out, LineSource::new(BufReader::new(stdin())));\n\t\t}\n\t}\n\tout.print();\n}\n\n// You can see my library at https://github.com/SolAlyth/atcoder-env-rs\n#[cfg(not(debug_assertions))] #[allow(unused)]\nmod mylib {\n\t#![allow(non_upper_case_globals)]\n\t\n\tpub const SUBMISSION: bool = true;\n\t\n\tpub const us998: usize = 998244353;\n\tpub const i998: i128 = 998244353;\n\tpub const us107: usize = 1000000007;\n\tpub const i107: i128 = 1000000007;\n\t\n\tconst usmod: usize = us998;\n\tconst imod: i128 = i998;\n\t\n\tpub use {\n\t\tmath::modulo::Modulo,\n\t\tutil::{\n\t\t\tprinter::{Printer, end},\n\t\t\ttraits::{AssignMinMax, CharFn}\n\t\t},\n\t\t\n\t\tproconio::{input, marker::{Chars as chars, Usize1 as usize1, Isize1 as isize1}, source::{Source, line::LineSource, once::OnceSource}},\n\t\tstd::io::{BufReader, BufRead, stdin},\n\t\tstd::cmp::{min, max, Reverse as Rev},\n\t\tstd::collections::{VecDeque, HashMap, HashSet, BTreeMap, BTreeSet, BinaryHeap},\n\t\tstd::mem::swap,\n\t\titertools::Itertools,\n\t\tsuperslice::Ext,\n\t\tnum_integer::{gcd, lcm, Roots}\n\t};\n\t\n\t\n\tpub mod data_struct {\n\t\tpub mod bitset {\n\t\t\tuse std::{ops::{BitAnd, BitOr, BitXor, Deref, Index, Not}, fmt::Debug};\n\t\t\tuse crate::mylib::util::iter::*;\n\t\t\t#[derive(Clone, Copy)] pub struct BitSet { value: usize, len: usize }\n\t\t\timpl BitSet { pub fn new(value: bool, len: usize) -> Self { BitSet { value: if value {!0} else {0}, len }.masked() } fn masked(mut self) -> Self { self.value &= BitSet::max(self.len); self } pub const fn sup(len: usize) -> usize { 1<<len } pub const fn max(len: usize) -> usize { Self::sup(len)-1 } pub fn generate(len: usize) -> impl DoubleEndedIterator<Item = Self> { (0..Self::sup(len)).map(move |i| BitSet { value: i, len }) } fn get_raw(&self, idx: usize) -> usize { assert!(idx < self.len); self.value>>idx & 1 } pub fn set(&mut self, idx: usize, value: bool) { assert!(idx < self.len); if value { self.value |= 1<<idx; } else { self.value &= !(1<<idx); } } pub fn count_true(&self) -> usize { self.value.count_ones() as usize } pub fn count_false(&self) -> usize { self.len - self.count_true() } pub fn is_full(&self) -> bool { self.value == BitSet::max(self.len) } pub fn is_empty(&self) -> bool { self.value == 0 } }\n\t\t\timpl BitAnd for BitSet { type Output = Self; fn bitand(mut self, rhs: Self) -> Self::Output { assert_eq!(self.len, rhs.len); self.value &= rhs.value; self } }\n\t\t\timpl BitOr for BitSet { type Output = Self; fn bitor(mut self, rhs: Self) -> Self::Output { assert_eq!(self.len, rhs.len); self.value |= rhs.value; self } }\n\t\t\timpl BitXor for BitSet { type Output = Self; fn bitxor(mut self, rhs: Self) -> Self::Output { assert_eq!(self.len, rhs.len); self.value ^= rhs.value; self } }\n\t\t\timpl Not for BitSet { type Output = Self; fn not(mut self) -> Self::Output { self.value = !self.value; self.masked() } }\n\t\t\timpl Deref for BitSet { type Target = usize; fn deref(&self) -> &Self::Target { &self.value } }\n\t\t\timpl Debug for BitSet { fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result { write!(f, \"{:?} ({})\", self.into_iter().collect::<Vec<_>>(), self.value) } }\n\t\t\timpl Index<usize> for BitSet { type Output = bool; fn index(&self, index: usize) -> &Self::Output { static A: [bool; 2] = [false, true]; &A[self.get_raw(index)] } }\n\t\t\timpl GenericIterable for BitSet { type Item = bool; fn giter_next(&mut self, i: usize) -> Option<Self::Item> { if i < self.len { Some(self[i]) } else { None } } }\n\t\t\timpl IntoIterator for BitSet { type Item = (usize, <Self as GenericIterable>::Item); type IntoIter = GenericIter<Self>; fn into_iter(self) -> Self::IntoIter { self.into() } }\n\t\t}\n\t\tpub mod compress {\n\t\t\tuse std::{collections::HashMap, hash::Hash};\n\t\t\tpub struct Numbering<T: Eq + Hash + Clone> { map: HashMap<T, usize>, vec: Vec<T> }\n\t\t\timpl<T: Eq + Hash + Clone> Numbering<T> { pub fn new() -> Self { Numbering { map: HashMap::new(), vec: vec![] } } pub fn entry(&mut self, key: &T) -> usize { if !self.map.contains_key(key) { self.map.insert(key.clone(), self.vec.len()); self.vec.push(key.clone()); } self.map[key] } pub fn get(&self, index: usize) -> &T { &self.vec[index] } }\n\t\t\tpub struct Compress<T: Ord> (Vec<T>);\n\t\t\timpl<T: Ord> Compress<T> { pub fn new() -> Self { Compress(vec![]) } pub fn insert(&mut self, key: T) { self.0.push(key); } pub fn insert_with(&mut self, iter: impl Iterator<Item = T>) { for key in iter { self.insert(key); } } pub fn calc(mut self) -> Compressed<T> { self.0.sort_unstable(); self.0.dedup(); Compressed(self.0) } }\n\t\t\tpub struct Compressed<T: Ord> (Vec<T>);\n\t\t\timpl<T: Ord> Compressed<T> { pub fn entry(&self, key: &T) -> usize { self.0.binary_search(key).unwrap() } pub fn get(&self, idx: usize) -> &T { &self.0[idx] } }\n\t\t}\n\t\tpub mod unionfind {\n\t\t\tuse crate::nest;\n\t\t\t#[derive(Clone, Copy)] enum Node { Leader(usize), Child(usize) }\n\t\t\t#[derive(Clone)] pub struct UnionFind { nodes: Vec<Node> }\n\t\t\timpl UnionFind { pub fn new(len: usize) -> Self { UnionFind { nodes: vec![Node::Leader(1); len] } } fn leader_and_size(&mut self, u: usize) -> (usize, usize) { let mut now = u; let mut stack = vec![]; let (leader, size) = loop { match self.nodes[now] { Node::Leader(size) => { break (now, size); } Node::Child(par) => { stack.push(now); now = par; } } }; for &i in stack.iter().rev() { self.nodes[i] = Node::Child(leader); } (leader, size) } pub fn leader(&mut self, u: usize) -> usize { self.leader_and_size(u).0 } pub fn size(&mut self, u: usize) -> usize { self.leader_and_size(u).1 } pub fn is_same(&mut self, u: usize, v: usize) -> bool { self.leader(u) == self.leader(v) } pub fn merge(&mut self, u: usize, v: usize) -> bool { let ((mut ul, us), (mut vl, vs)) = (self.leader_and_size(u), self.leader_and_size(v)); if us < vs { std::mem::swap(&mut ul, &mut vl); } if ul != vl { self.nodes[ul] = Node::Leader(us+vs); self.nodes[vl] = Node::Child(ul); } ul != vl } pub fn group(&mut self, mut u: usize) -> Vec<usize> { u = self.leader(u); (0..self.nodes.len()).filter(|&v| self.leader(v) == u).collect() } pub fn groups(&mut self) -> Vec<Vec<usize>> { let mut out = nest![void; self.nodes.len()]; for u in 0..self.nodes.len() { out[self.leader(u)].push(u); } out.retain(|v| v.len() != 0); out } }\n\t\t\ttype WeightType = i128;\n\t\t\t#[derive(Clone)] pub struct WeightedUnionFind { nodes: Vec<Node>, diff: Vec<WeightType> }\n\t\t\timpl WeightedUnionFind { pub fn new(len: usize) -> Self { WeightedUnionFind { nodes: vec![Node::Leader(1); len], diff: vec![0; len] } } fn leader_and_size(&mut self, u: usize) -> (usize, usize) { let mut now = u; let mut stack = vec![]; let (leader, size) = loop { match self.nodes[now] { Node::Leader(size) => { break (now, size); } Node::Child(par) => { stack.push(now); now = par; } } }; for &child in stack.iter().rev() { let Node::Child(parent) = self.nodes[child] else { unreachable!(); }; self.nodes[child] = Node::Child(leader); self.diff[child] += self.diff[parent]; } (leader, size) } pub fn leader(&mut self, u: usize) -> usize { self.leader_and_size(u).0 } pub fn size(&mut self, u: usize) -> usize { self.leader_and_size(u).1 } pub fn is_same(&mut self, u: usize, v: usize) -> bool { self.leader(u) == self.leader(v) } pub fn weight(&mut self, u: usize, v: usize) -> Result<WeightType, ()> { if self.leader(u) == self.leader(v) { Ok(-self.diff[u] + self.diff[v]) } else { Err(()) } } pub fn merge(&mut self, u: usize, v: usize, mut w: WeightType) -> Result<bool, ()> { let ((mut ul, us), (mut vl, vs)) = (self.leader_and_size(u), self.leader_and_size(v)); if us < vs { std::mem::swap(&mut ul, &mut vl); w = -w; } if ul != vl { self.nodes[ul] = Node::Leader(us+vs); self.nodes[vl] = Node::Child(ul); Ok(true) } else { if self.weight(u, v).unwrap() == w { Ok(false) } else { Err(()) } } } pub fn group(&mut self, mut u: usize) -> Vec<usize> { u = self.leader(u); (0..self.nodes.len()).filter(|&v| self.leader(v) == u).collect() } pub fn groups(&mut self) -> Vec<Vec<usize>> { let mut out = nest![void; self.nodes.len()]; for u in 0..self.nodes.len() { out[self.leader(u)].push(u); } out.retain(|v| v.len() != 0); out } }\n\t\t}\n\t}\n\t\n\tpub mod math {\n\t\tpub mod modulo {\n\t\t\tuse super::super::{imod, usmod};\n\t\t\tpub trait Modulo: Copy { fn simplify(self) -> Self; fn mpow(self, a: usize) -> Self; fn minv_fermat(self) -> Self { self.mpow(usmod-2) } }\n\t\t\timpl Modulo for i128 { fn simplify(mut self) -> Self { if !(0..imod).contains(&self) { self %= imod; if self < 0 { self += imod; } } self } fn mpow(mut self, mut a: usize) -> Self { let mut out = 1; while a != 0 { if a&1 == 1 { out = (out * self).simplify(); } self = self.pow(2).simplify(); a >>= 1; } out } }\n\t\t}\n\t}\n\t\n\tpub mod util {\n\t\tpub mod printer {\n\t\t\t#![allow(non_camel_case_types, non_upper_case_globals)]\n\t\t\tuse { std::{ops::{Shl, Not}, cell::{UnsafeCell, Cell}, mem::transmute}, itertools::Itertools };\n\t\t\t#[macro_export] macro_rules! pr { (\\$(\\$args:tt)*) => { println!(\\$(\\$args)*); } }\n\t\t\t#[macro_export] macro_rules! epr { (\\$(\\$args:tt)*) => { } }\n\t\t\tpub struct Printer<const sp: bool = true> { out: UnsafeCell<String>, endf: bool, bsp: Cell<bool> }\n\t\t\timpl Printer { pub fn new(endf: bool) -> Self { Printer { out: String::new().into(), endf, bsp: true.into() } } }\n\t\t\timpl<const sp: bool> Printer<sp> { fn push(&self, v: &str) { unsafe { let s = &mut *self.out.get(); if (self.bsp.replace(sp) || sp) && !s.is_empty() { *s += \" \"; } *s += v; } } pub fn print(&self) { unsafe { let s = &mut *self.out.get(); if !s.is_empty() { pr!(\"{}\", s); s.clear(); } } } }\n\t\t\timpl<T: PrinterDisplay, const sp: bool> Shl<T> for &Printer<sp> { type Output = Self; fn shl(self, rhs: T) -> Self::Output { self.push(&rhs.pdisp(sp)); self } }\n\t\t\timpl<'a> Not for &'a Printer<true> { type Output = &'a Printer<false>; fn not(self) -> Self::Output { unsafe { transmute(self) } } }\n\t\t\tpub struct end;\n\t\t\timpl<const sp: bool> Shl<end> for &Printer<sp> { type Output = (); fn shl(self, _: end) -> Self::Output { self.bsp.replace(true); if self.endf { self.print(); } } }\n\t\t\ttrait PrinterDisplay { fn pdisp(&self, sp: bool) -> String; }\n\t\t\ttrait PrimitivePrinterDisplay: PrinterDisplay {}\n\t\t\tmacro_rules! fall { (\\$(\\$t:ty);+) => { \\$( impl PrinterDisplay for \\$t { fn pdisp(&self, _: bool) -> String { format!(\"{}\", self) } } impl PrimitivePrinterDisplay for \\$t {} )+ }; }\n\t\t\tfall!( u8; u16; u32; u64; u128; usize; i8; i16; i32; i64; i128; isize; f32; f64; char; &str; &String; String );\n\t\t\timpl PrinterDisplay for bool { fn pdisp(&self, _: bool) -> String { String::from(if *self {\"Yes\"} else {\"No\"}) } }\n\t\t\timpl PrimitivePrinterDisplay for bool {}\n\t\t\timpl<T: PrimitivePrinterDisplay> PrinterDisplay for Vec<T> { fn pdisp(&self, sp: bool) -> String { self.iter().map(|v| v.pdisp(sp)).join(if sp {\" \"} else {\"\"}) } }\n\t\t\timpl<T: PrimitivePrinterDisplay> PrinterDisplay for &[T] { fn pdisp(&self, sp: bool) -> String { self.iter().map(|v| v.pdisp(sp)).join(if sp {\" \"} else {\"\"}) } }\n\t\t}\n\t\tpub mod traits {\n\t\t\tpub trait AssignMinMax: Sized + PartialOrd { fn assign_max(&mut self, value: Self) { if (self as &Self).partial_cmp(&value).unwrap().is_lt() { *self = value; } } fn assign_min(&mut self, value: Self) { if (self as &Self).partial_cmp(&value).unwrap().is_gt() { *self = value; } } }\n\t\t\tmacro_rules! impl_update { (\\$(\\$t:ty);+) => { \\$( impl AssignMinMax for \\$t {} )+ }; }\n\t\t\timpl_update!(u8; u16; u32; u64; u128; i8; i16; i32; i64; i128; f32; f64);\n\t\t\tpub trait CharFn: Copy { fn add(self, v: isize) -> Self; fn to_lower(self) -> Self; fn to_upper(self) -> Self; fn lower_to_us(self) -> usize; fn upper_to_us(self) -> usize; fn num_to_us(self) -> usize; fn into_lower(v: usize) -> Self; fn into_upper(v: usize) -> Self; }\n\t\t\timpl CharFn for char { fn add(self, v: isize) -> Self { (self as isize + v) as u8 as char } fn to_lower(self) -> Self { self.add(32) } fn to_upper(self) -> Self { self.add(-32) } fn lower_to_us(self) -> usize { self as usize - 97 } fn upper_to_us(self) -> usize { self as usize - 65 } fn num_to_us(self) -> usize { self as usize - 48 } fn into_lower(v: usize) -> Self { (v+97) as u8 as char } fn into_upper(v: usize) -> Self { (v+65) as u8 as char } }\n\t\t}\n\t\tpub mod macros {\n\t\t\t#[macro_export] macro_rules! nest { (void; \\$n:expr) => { vec![vec![];\\$n] }; (void; \\$n:expr \\$(;\\$m:expr)+) => { vec![nest![void\\$(;\\$m)+]; \\$n] }; (\\$e:expr; \\$n:expr) => { vec![\\$e; \\$n] }; (\\$e:expr; \\$n:expr \\$(;\\$m:expr)+) => { vec![nest![\\$e\\$(;\\$m)+]; \\$n] }; }\n\t\t}\n\t\tpub mod iter {\n\t\t\tpub struct GenericIter<T: GenericIterable>(T, usize);\n\t\t\tpub trait GenericIterable: Sized { type Item; fn giter_next(&mut self, i: usize) -> Option<Self::Item>; }\n\t\t\timpl<T: GenericIterable> From<T> for GenericIter<T> { fn from(value: T) -> Self { GenericIter(value, 0) } }\n\t\t\timpl<T: GenericIterable> Iterator for GenericIter<T> { type Item = (usize, T::Item); fn next(&mut self) -> Option<Self::Item> { let tmp = self.0.giter_next(self.1); self.1 += 1; tmp.map(|v| (self.1, v)) } }\n\t\t}\n\t}\n}"
	},
	
	"stderr print": {
		"scope": "rust",
		"prefix": "epr",
		"body": "epr!(\"{$0}\");"
	},
	
	"match unreachable": {
		"scope": "rust",
		"prefix": "_",
		"body": "_ => { unreachable!(); }"
	},
	
	"累積和": {
		"scope": "rust",
		"prefix": "snp_wa",
		"body": [
			"let mut wa = vec![0; $1.len()+1];",
			"for ${2:i} in 0..$1.len() {",
			"\twa[$2+1] = wa[$2] + $1[$2];",
			"}",
			"$0"
		]
	},
	
	"幅優先探索": {
		"scope": "rust",
		"prefix": "snp_bfs",
		"body": [
			"let mut seen = vec![false; ${1:N}]; seen[0] = true;",
			"let mut queue = VecDeque::from([]);",
			"while let Some(q) = queue.pop_front() {",
			"\tfor &to in &${2:E}[q] {",
			"\t\tif seen[to] { continue; }",
			"\t\t",
			"\t\t$0",
			"\t\t",
			"\t\tseen[to] = true;"
			"\t\tqueue.push_back(to);",
			"\t}",
			"}"
		]
	},
	
	"out": {
		"scope": "rust",
		"prefix": "out",
		"body": "out << $0;"
	},
	
	"test": {
		"scope": "rust",
		"prefix": "test",
		"body": [
			"#[cfg(test)]",
			"mod test {",
			"\t#[allow(unused)] use super::*;",
			"\t",
			"\t#[test]",
			"\tfn a() {",
			"\t\t",
			"\t}",
			"}"
		]
	}
}
