{
	"Initialize for AtCoder": {
		"scope": "rust",
		"prefix": "init",
		"body": "#![allow(unused_must_use, non_snake_case)]\n\nuse mylib::*;\nconst INTERACTIVE: bool = false;\n\nfn solve() {\n\tinput! {\n\t\t$1\n\t}\n\t\n\t$0\n}\n\n\n\nfn main() {\n\tout.init(if INTERACTIVE || !SUBMISSION { EndFlag::Print } else {EndFlag::LineFeed});\n\tsolve();\n\tout.print();\n}\n\n// cargo test -- --nocapture\n#[test]\nfn test() {\n\tout.init(EndFlag::Print);\n\tout.print();\n}"
	},
	
	"stderr print": {
		"scope": "rust",
		"prefix": "epr",
		"body": "epr!(\"{$0}\");"
	},
	
	"nested vector": {
		"scope": "rust",
		"prefix": "nest",
		"body": "nest![$0];"
	},
	
	"unreachable match": {
		"scope": "rust",
		"prefix": "snp_match_unreachable",
		"body": "_ => { unreachable!(); }"
	},
	
	"LRUD match": {
		"scope": "rust",
		"prefix": "snp_match_lrud",
		"body": [
			"match $0 {",
			"\t'L' => {",
			"\t\t/* i-- */",
			"\t}",
			"\t'R' => {",
			"\t\t/* i++ */",
			"\t}",
			"\t'U' => {",
			"\t\t/* j-- */",
			"\t}",
			"\t'D' => {",
			"\t\t/* j++ */",
			"\t}",
			"}"
		]
	},
	
	"累積和": {
		"scope": "rust",
		"prefix": "snp_wa",
		"body": [
			"// [l..r] の和 == wa[r] - wa[l]",
			"let mut wa = vec![0; $0.len()+1];",
			"for i in 0..$0.len() { wa[i+1] = wa[i] + $0[i]; }"
		]
	},
	
	"imos 法": {
		"scope": "rust",
		"prefix": "snp_imos",
		"body": [
			// 入力が [0, a, b, c, ...] とかだと楽なんだけどな～～
			
			"// [l..r] の加算: { sa[l] += v; sa[r] -= v; }",
			"let mut sa = vec![0; $0.len()];",
			"for i in 0..$0.len() { sa[i] = $0[i] - elsedef!(i!=0; $0[i-1]); }",
			"",
			"",
			"",
			"let mut rest = vec![0; $0.len()];",
			"for i in 0..$0.len() { rest[i] = sa[i] + elsedef!(i!=0; rest[i-1]); }"
		]
	},
	
	"幅優先探索 (BFS)": {
		"scope": "rust",
		"prefix": "snp_bfs",
		"body": [
			"let mut queue = VecDeque::from([$1]);",
			"while let Some(q) = queue.pop_front() {",
			"\tfor &to in &E[q] {",
			"\t\tif todo!(\"skip condition\") { continue; }",
			"\t\t",
			"\t\t$0",
			"\t\t",
			"\t\tqueue.push_back(to);",
			"\t}",
			"}"
		]
	},
	
	"test": {
		"scope": "rust",
		"prefix": "test",
		"body": [
			"#[test]",
			"fn $1() {",
			"\t$0",
			"}"
		]
	}
}
